

const express = require('express');
const axios = require('axios');
const cors = require('cors');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// –í server.js –¥–æ–±–∞–≤—å—Ç–µ —è–≤–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è GitHub Pages:
app.use(cors({
  origin: ['https://skysea116.github.io/coffeee/', 'http://localhost:3000'],
  methods: ['GET', 'POST']
}));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ CORS
app.use(cors());
app.use(express.json());

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;
const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`;

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏
app.get('/', (req, res) => {
  res.status(200).json({ 
    status: 'active',
    service: 'Coffee Delivery for Kristina',
    message: '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç! –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ POST-–∑–∞–ø—Ä–æ—Å—ã –Ω–∞ /order'
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞
app.post('/order', async (req, res) => {
  try {
    const { name, coffee, address, message } = req.body;

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    const telegramMessage = `‚òï *–ù–û–í–´–ô –ó–ê–ö–ê–ó –ö–û–§–ï –î–õ–Ø –ö–†–ò–°–¢–ò–ù–´!* üòª\n\n`
      + `*–ò–º—è:* ${name}\n`
      + `*–ö–æ—Ñ–µ:* ${coffee}\n`
      + `*–ê–¥—Ä–µ—Å:* ${address}\n`
      + `*–ü–æ–∂–µ–ª–∞–Ω–∏—è:* ${message}\n\n`
      + `_–ü—Ä–æ–º–æ–∫–æ–¥: –ö–†–ò–°–¢–ò–ù–ê_\n`
      + `#–∫–æ—Ñ–µ_–¥–ª—è_–∫—Ä–∏—Å—Ç–∏–Ω—ã #–∑–∞–∫–∞–∑`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    await axios.post(TELEGRAM_API_URL, {
      chat_id: TELEGRAM_CHAT_ID,
      text: telegramMessage,
      parse_mode: 'Markdown'
    });

    res.status(200).json({ success: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞:', error.response?.data || error.message);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error.message 
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—É—Ç–µ–π
app.use((req, res) => {
  res.status(404).json({
    error: 'Not Found',
    message: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ POST /order –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–æ–≤'
  });
});

// –°—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});